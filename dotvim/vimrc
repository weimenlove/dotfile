" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" add by fantity 2013-3-31
execute pathogen#infect()
" add end

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
"else
"  set backup		" keep a backup file
"endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2) || has("gui_running")
	syntax on
	set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Add 2012-5-7
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gb2312,big5,latin1
set number
"set background=dark
"color murphy
set gfn=Ubuntu\ Mono\ 14
set clipboard+=unnamed
set showmatch
set matchtime=5
set ignorecase
set smartindent
set nobackup
set noswapfile
set incsearch    " show search matches as you type
set shiftround   " use multiple of shiftwidth when indenting with '<' and '>'
set noexpandtab
"set expandtab
set tabstop=4
set shiftwidth=4
set cursorline
set smartindent
set display=lastline
set wrapmargin=0
set linebreak
set clipboard=unnamedplus

if has("multi_byte")
	set lcs=tab:\»\ ,trail:•,extends:>,precedes:<,nbsp:¤"
	let &sbr = nr2char(8618).' '
else
	set lcs=tab:>\ ,extends:>,precedes:<,trail:-
	let &sbr = '+++ '
endif

function! UpdateLcs()
	if (&previewwindow)
		setlocal nolist
	endif
endfunction

autocmd BufEnter,BufWinEnter,WinEnter,CmdwinEnter * call UpdateLcs()

set list

function! TabIndent() range
	let cl = a:firstline
	while (cl <= a:lastline)
		execute "normal 0i\<Tab>"
		execute "normal j"
		let cl = cl + 1
	endwhile
endfunction

function! TabUnindent() range
	let cl = a:firstline
	while (cl <= a:lastline)
		if indent(cl) >= &tabstop
			execute "normal 0"
			let end = indent(cl) - &tabstop
			while indent(cl) > end
				execute "normal x"
			endwhile
		endif
		execute "normal j"
		let cl = cl + 1
	endwhile
endfunction

nnoremap ; :
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>
nmap <silent> <F5> :nohlsearch<CR>
" set search head path
"set path+=/usr/src/linux-headers-2.6.32-5-common/include
" set ctags
"set tags+=~/.vim/systags "设置系统标签
" set Tlist
"let Tlist_Show_One_File = 1
"let Tlist_Exit_OnlyWindow = 1
"let Tlist_Process_File_Always = 1
" set winManager
"let g:winManagerWindowLayout='FileExplorer|TagList'
"nmap wm :WMToggle<cr>
" set minibuf
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplModSelTarget = 1
"let g:miniBufExplMaxSize = 1

"runtime local.vim

"" 定义函数setTitle，自动插入头文件
func SetTitle()
	"如果文件类型为.sh文件
	if &filetype == 'sh'
		call setline(1,          "\#################################################################")
		call append(line("."),   "\# File Name: ".expand("%"))
		call append(line(".")+1, "\# Author: Matthew Wei")
		call append(line(".")+2, "\# E-mail: weimenlove@gmail.com")
		call append(line(".")+3, "\# Created Time: ".strftime("%c"))
		call append(line(".")+4, "\#################################################################")
		call append(line(".")+5, "")
		call append(line(".")+6, "\#!/bin/sh")
		call append(line(".")+7, "")
	else
		call setline(1,          "/****************************************************************")
		call append(line("."),   " * File Name: ".expand("%"))
		call append(line(".")+1, " * Author: Matthew Wei")
		call append(line(".")+2, " * E-mail: weimenlove@gmail.com")
		call append(line(".")+3, " * Created Time: ".strftime("%c"))
		call append(line(".")+4, "****************************************************************/")
		call append(line(".")+5, "")
	endif
	if &filetype == 'c'
		call append(line(".")+6, "#include <stdio.h>")
		call append(line(".")+7, "")
	endif
endfunc

"新建.c .h .sh时，自动插入文件头
autocmd BufNewFile *.c,*.h exec ":call SetTitle()"

